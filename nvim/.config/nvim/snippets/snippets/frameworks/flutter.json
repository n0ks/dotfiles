{
  "Json factory": {
    "prefix": "jss",
    "body": [
      "factory ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}.fromJson(Map<String, dynamic> json) => _\\$${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}FromJson(json);",
      " ",
      "Map<String, dynamic> toJson() => _\\$${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}ToJson(this);"
    ],
    "description": "Create Json serializable"
  },
  "Freezed dataclass": {
    "prefix": "fdataclass",
    "body": [
      "import 'package:freezed_annotation/freezed_annotation.dart';",
      "part '${TM_FILENAME_BASE}.freezed.dart';",
      "part '${TM_FILENAME_BASE}.g.dart';",
      " ",
      "@freezed",
      "class ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g} with _\\$${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g} { ",
      " ",
      "const factory ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}() = _${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g};",
      "}"
    ],
    "description": "Create a freezed dataclass"
  },
  "Freezed state": {
    "prefix": "fstate",
    "body": [
      "import 'package:freezed_annotation/freezed_annotation.dart';",
      "part '${TM_FILENAME_BASE}.freezed.dart';",
      "part '${TM_FILENAME_BASE}.g.dart';",
      " ",
      "@freezed",
      "class ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g} with _\\$${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g} { ",
      " ",
      "const factory ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}({required bool param}) = _${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g};",
      " ",
      "factory ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}.initial() => const ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}({})",
      "}"
    ],
    "description": "Create a freezed dataclass"
  },
  "Part file": {
    "prefix": "pts",
    "body": [
      "part '${TM_FILENAME_BASE}.g.dart';"
    ],
    "description": "Create .g part"
  },
  "Freezed Part file": {
    "prefix": "fpts",
    "body": [
      "part '${TM_FILENAME_BASE}.freezed.dart';"
    ],
    "description": "Create .freezed part"
  },
  "Ignore file coverage": {
    "prefix": "cov",
    "body": [
      "// coverage: ignore-file"
    ],
    "description": "Ignore this file on test coverage"
  },
  "Verify": {
    "prefix": "ve",
    "body": [
      "verify(() => $1);"
    ],
    "description": "Verify test"
  },
  "Datasource function": {
    "prefix": "dsf",
    "body": [
      "FutureResult<GenericFailure, $2> $1() async {",
      "\tfinal response = await execute(",
      "\t\t() => http.client.post(",
      "\t\t\t'',",
      "\t\t\tdata: {},",
      "\t\t),",
      "\t);",
      "",
      "\treturn response.when(",
      "\t\tfailure: (e) => const Result.failure(GenericFailure()),",
      "\t\tsuccess: (d) => Result.success($2.fromJson(d.data!)),",
      "\t);",
      "}"
    ],
    "description": "Datasource function"
  },

  "Model class": {
    "prefix": "mdl",
    "body": [
      " import 'package:json_annotation/json_annotation.dart';",
      "",
      "@JsonSerializable()",
      "class $1Model extends $1Entity {",
      "",
      "const $1Model();",
      "",
      "}"
    ],
    "description": "Datasource function"
  },
  "Entity class": {
    "prefix": "ett",
    "body": [
      "abstract class $1Entity { ",
      "",
      "const $1Entity();",
      "",
      "}"
    ],
    "description": "Datasource function"
  },
  "Datasource class": {
    "prefix": "dsc",
    "body": [
      "import 'package:injectable/injectable.dart';",
      "",
      "@Injectable(as: $1Datasource)",
      "class $1DatasourceImpl implements $1Datasource {",
      "",
      "const $1DatasourceImpl();",
      "",
      "}"
    ],
    "description": "Datasource function"
  },
  "Usecase class": {
    "prefix": "ucase",
    "body": [
      "@injectable",
      "class $1 {",
      "\t$1(this._repository);",
      "",
      "final _repository;",
      "",
      "\tFutureResult<GenericFailure, $2> call(",
      "\t) {",
      "\t\tthrow UnimplementedError();",
      "\t}",
      "}"
    ],
    "description": "Usecase class"
  },
  "Get it controller": {
    "prefix": "getc",
    "body": [
      "final $1_controller = GetIt.I.get();"
    ],
    "description": "Get a controller from get it"
  },
  "Get it register factory": {
    "prefix": "getrf",
    "body": [
      "GetIt.I.registerFactory<$1>($2);"
    ],
    "description": "Get a controller from get it"
  }
}
