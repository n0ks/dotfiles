{
  "Bloc": {
    "prefix": "bloc",
    "body": [
      "import 'package:flutter_bloc/flutter_bloc.dart';",
      "class ${1:Subject}Bloc extends Bloc<$1Event, $1State> {",
      "\t${1:Subject}Bloc() : super(${1:Subject}Initial()) {",
      "\t\ton<$1Event>((event, emit) {",
      "\t\t\t${2:// TODO: implement event handler}",
      "\t\t});",
      "\t}",
      "}"
    ]
  },
  "Cubit": {
    "prefix": "cubit",
    "body": [
      "import 'package:flutter_bloc/flutter_bloc.dart';",
      "class ${1:Subject}Cubit extends Cubit<$1State> {",
      "\t${1:Subject}Cubit() : super(${1:Subject}Initial());",
      "}"
    ]
  },
  "BlocObserver": {
    "prefix": "blocobserver",
    "body": [
      "import 'package:bloc/bloc.dart';",
      "",
      "class ${1:My}BlocObserver extends BlocObserver {",
      "\t@override",
      "\tvoid onEvent(Bloc bloc, Object? event) {",
      "\t\tsuper.onEvent(bloc, event);",
      "\t\t${2:// TODO: implement onEvent}",
      "\t}",
      "",
      "\t@override",
      "\tvoid onError(BlocBase bloc, Object error, StackTrace stackTrace) {",
      "\t\t${3:// TODO: implement onError}",
      "\t\tsuper.onError(bloc, error, stackTrace);",
      "\t}",
      "",
      "\t@override",
      "\tvoid onChange(BlocBase bloc, Change change) {",
      "\t\tsuper.onChange(bloc, change);",
      "\t\t${4:// TODO: implement onChange}",
      "\t}",
      "",
      "\t@override",
      "\tvoid onTransition(Bloc bloc, Transition transition) {",
      "\t\tsuper.onTransition(bloc, transition);",
      "\t\t${4:// TODO: implement onTransition}",
      "\t}",
      "}"
    ]
  },
  "Bloc State": {
    "prefix": "blocstate",
    "body": [
      "class ${1:Subject}${2:Verb}${3:State} extends $1State {",
      "\tconst $1$2$3($5);",
      "",
      "\t$4",
      "",
      "\t@override",
      "\tList<Object> get props => [$6];",
      "}"
    ],
    "description": "Subject + Verb (action) + State"
  },
  "Bloc Event": {
    "prefix": "blocevent",
    "body": [
      "class ${1:Subject}${2:Noun}${3:Verb} extends $1Event {",
      "\tconst $1$2$3($5);",
      "",
      "\t$4",
      "",
      "\t@override",
      "\tList<Object> get props => [$6];",
      "}"
    ],
    "description": "Subject + Noun (optional) + Verb (event)"
  },
  "Import package:bloc": {
    "prefix": "importbloc",
    "body": "import 'package:bloc/bloc.dart';",
    "description": "import package:bloc/bloc.dart;"
  },
  "Register Event Handler": {
    "prefix": "onevent",
    "body": [
      "on<${1:${TM_FILENAME_BASE/(.*)(?=_bloc)(_bloc)/${1:/pascalcase}/g}Event}>((event, emit) {",
      "\t${2:// TODO: implement event handler}",
      "});"
    ],
    "description": "Register a new EventHandler"
  },
  "Define Event Handler": {
    "prefix": "_onevent",
    "body": [
      "${1|void,Future<void>|} _on${2:Event}(",
      "\t$2 event,",
      "\tEmitter<${3:${TM_FILENAME_BASE/(.*)(?=_bloc)(_bloc)/${1:/pascalcase}/g}State}> emit,",
      ") ${4:async} {",
      "\t${5:// TODO: implement event handler}",
      "}"
    ],
    "description": "Define a new EventHandler"
  },
  "BlocProvider": {
    "prefix": "blocprovider",
    "body": [
      "BlocProvider(",
      "\tcreate: (context) => ${1:Subject}${2|Bloc,Cubit|}(),",
      "\tchild: ${3:Container()},",
      ")"
    ]
  },
  "MultiBlocProvider": {
    "prefix": "multiblocprovider",
    "body": [
      "MultiBlocProvider(",
      "\tproviders: [",
      "\t\tBlocProvider(",
      "\t\t\tcreate: (context) => ${1:Subject}${2|Bloc,Cubit|}(),",
      "\t\t),",
      "\t\tBlocProvider(",
      "\t\t\tcreate: (context) => ${3:Subject}${4|Bloc,Cubit|}(),",
      "\t\t),",
      "\t],",
      "\tchild: ${5:Container()},",
      ")"
    ]
  },
  "RepositoryProvider": {
    "prefix": "repoprovider",
    "body": [
      "RepositoryProvider(",
      "\tcreate: (context) => ${1:Subject}Repository(),",
      "\tchild: ${2:Container()},",
      ")"
    ]
  },
  "MultiRepositoryProvider": {
    "prefix": "multirepoprovider",
    "body": [
      "MultiRepositoryProvider(",
      "\tproviders: [",
      "\t\tRepositoryProvider(",
      "\t\t\tcreate: (context) => ${1:Subject}Repository(),",
      "\t\t),",
      "\t\tRepositoryProvider(",
      "\t\t\tcreate: (context) => ${2:Subject}Repository(),",
      "\t\t),",
      "\t],",
      "\tchild: ${3:Container()},",
      ")"
    ]
  },
  "BlocBuilder": {
    "prefix": "blocbuilder",
    "body": [
      "BlocBuilder<${1:Subject}${2|Bloc,Cubit|}, $1State>(",
      "\tbuilder: (context, state) {",
      "\t\treturn ${3:Container()};",
      "\t},",
      ")"
    ]
  },
  "BlocSelector": {
    "prefix": "blocselector",
    "body": [
      "BlocSelector<${1:Subject}${2|Bloc,Cubit|}, $1State, ${3:Selected}>(",
      "\tselector: (state) {",
      "\t\treturn ${4:state};",
      "\t},",
      "\tbuilder: (context, state) {",
      "\t\treturn ${5:Container()};",
      "\t},",
      ")"
    ]
  },
  "BlocListener": {
    "prefix": "bloclistener",
    "body": [
      "BlocListener<${1:Subject}${2|Bloc,Cubit|}, $1State>(",
      "\tlistener: (context, state) {",
      "\t\t${3:// TODO: implement listener}",
      "\t},",
      "\tchild: ${4:Container()},",
      ")"
    ]
  },
  "MultiBlocListener": {
    "prefix": "multibloclistener",
    "body": [
      "MultiBlocListener(",
      "\tlisteners: [",
      "\t\tBlocListener<${1:Subject}${2|Bloc,Cubit|}, $1State>(",
      "\t\t\tlistener: (context, state) {",
      "\t\t\t\t${3:// TODO: implement listener}",
      "\t\t\t},",
      "\t\t),",
      "\t\tBlocListener<${4:Subject}${5|Bloc,Cubit|}, $4State>(",
      "\t\t\tlistener: (context, state) {",
      "\t\t\t\t${6:// TODO: implement listener}",
      "\t\t\t},",
      "\t\t),",
      "\t],",
      "\tchild: ${7:Container()},",
      ")"
    ]
  },
  "BlocConsumer": {
    "prefix": "blocconsumer",
    "body": [
      "BlocConsumer<${1:Subject}${2|Bloc,Cubit|}, $1State>(",
      "\tlistener: (context, state) {",
      "\t\t${3:// TODO: implement listener}",
      "\t},",
      "\tbuilder: (context, state) {",
      "\t\treturn ${4:Container()};",
      "\t},",
      ")"
    ]
  },
  "BlocProvider.of()": {
    "prefix": "blocof",
    "body": "BlocProvider.of<${1:Subject}${2|Bloc,Cubit|}>(context)"
  },
  "RepositoryProvider.of()": {
    "prefix": "repoof",
    "body": "RepositoryProvider.of<${1:Subject}Repository>(context)"
  },
  "context.read()": {
    "prefix": "read",
    "body": "context.read<${1:Subject}${2|Bloc,Cubit,Repository|}>()"
  },
  "context.select()": {
    "prefix": "select",
    "body": "context.select((${1:Subject}${2|Bloc,Cubit|} ${3:element}) => $3$4)"
  },
  "context.watch()": {
    "prefix": "watch",
    "body": "context.watch<${1:Subject}${2|Bloc,Cubit,Repository|}>()"
  },
  "Import package:flutter_bloc": {
    "prefix": "importflutterbloc",
    "body": "import 'package:flutter_bloc/flutter_bloc.dart';",
    "description": "import package:flutter_bloc/flutter_bloc.dart;"
  }
}
