{
  "typescriptReactFunctionalExportComponent": {
    "key": "typescriptReactFunctionalExportComponent",
    "prefix": "tsrfce",
    "body": [
      "import React from 'react'",
      "",
      "type Props = {}",
      "",
      "function ${1:${TM_FILENAME_BASE}}({}: Props) {",
      "  return (",
      "    <div>${1:first}</div>",
      "  )",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}"
    ],
    "description": "Creates a React Functional Component with ES7 module system and TypeScript interface",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "typescriptReactFunctionalComponent": {
    "key": "typescriptReactFunctionalComponent",
    "prefix": "tsrfc",
    "body": [
      "import React from 'react'",
      "",
      "type Props = {}",
      "",
      "export default function ${1:${TM_FILENAME_BASE}}({}: Props) {",
      "  return (",
      "    <div>${1:first}</div>",
      "  )",
      "}"
    ],
    "description": "Creates a React Functional Component with ES7 module system and TypeScript interface",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "typescriptReactArrowFunctionExportComponent": {
    "key": "typescriptReactArrowFunctionExportComponent",
    "prefix": "tsrafce",
    "body": [
      "import React from 'react'",
      "",
      "type Props = {}",
      "",
      "const ${1:${TM_FILENAME_BASE}} = (props: Props) => {",
      "  return (",
      "    <div>${1:first}</div>",
      "  )",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}"
    ],
    "description": "Creates a React Arrow Function Component with ES7 module system and TypeScript interface",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "typescriptReactArrowFunctionComponent": {
    "key": "typescriptReactArrowFunctionComponent",
    "prefix": "tsrafc",
    "body": [
      "import React from 'react'",
      "",
      "type Props = {}",
      "",
      "const ${1:${TM_FILENAME_BASE}} = (props: Props) => {",
      "  return (",
      "    <div>${1:first}</div>",
      "  )",
      "}"
    ],
    "description": "Creates a React Arrow Function Component with ES7 module system and TypeScript interface",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "typescriptReactNativeArrowFunctionComponent": {
    "key": "typescriptReactNativeArrowFunctionComponent",
    "prefix": "tsrnf",
    "body": [
      "import { View, Text } from 'react-native'",
      "import React from 'react'",
      "",
      "type Props = {}",
      "",
      "export function ${1:${TM_FILENAME_BASE}} (props: Props) {",
      "  return (",
      "    <View>",
      "      <Text>${1:first}</Text>",
      "    </View>",
      "  )",
      "}",
      ""
    ],
    "description": "Creates a React Native Function Component TypeScript",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "typescriptReactNativeArrowFunctionComponentWithStyles": {
    "key": "typescriptReactNativeArrowFunctionComponentWithStyles",
    "prefix": "tsrnfs",
    "body": [
      "import { StyleSheet, Text, View } from 'react-native'",
      "import React from 'react'",
      "",
      "type Props = {}",
      "",
      "export function ${1:${TM_FILENAME_BASE}} (props: Props) {",
      "  return (",
      "    <View>",
      "      <Text>${1:first}</Text>",
      "    </View>",
      "  )",
      "}",
      "",
      "const styles = StyleSheet.create({})"
    ],
    "description": "Creates a React Native Arrow Function Component with ES7 module system, TypeScript interface and StyleSheet",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "consoleLogObject": {
    "key": "consoleLogObject",
    "prefix": "clo",
    "body": [
      "console.log('${1:first}', ${1:first})"
    ],
    "description": "Logs property with name.",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "consoleLogJson": {
    "key": "consoleLogJson",
    "prefix": "clj",
    "body": [
      "console.log('${1:first}', JSON.stringify(${1:first}, null, 2))"
    ],
    "description": "Logs stringified JSON property with name.",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "useCallback": {
    "key": "useCallback",
    "prefix": "useCallbackSnippet",
    "body": [
      "useCallback(",
      "  () => {",
      "    ${1:first}",
      "  },",
      "  [${2:second}],",
      ")",
      ""
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "useContext": {
    "key": "useContext",
    "prefix": "useContextSnippet",
    "body": [
      "const ${1:first} = useContext(${2:second})"
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "useEffect": {
    "key": "useEffect",
    "prefix": "useEffectSnippet",
    "body": [
      "useEffect(() => {",
      "  ${1:first}",
      "",
      "  return () => {",
      "    ${2:second}",
      "  }",
      "}, [${3:third}])",
      ""
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "useImperativeHandle": {
    "key": "useImperativeHandle",
    "prefix": "useImperativeHandleSnippet",
    "body": [
      "useImperativeHandle(",
      "  ${1:first},",
      "  () => {",
      "    ${2:second}",
      "  },",
      "  [${3:third}],",
      ")"
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "useLayoutEffect": {
    "key": "useLayoutEffect",
    "prefix": "useLayoutEffectSnippet",
    "body": [
      "useLayoutEffect(() => {",
      "  ${1:first}",
      "",
      "  return () => {",
      "    ${2:second}",
      "  };",
      "}, [${3:third}])"
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "useMemo": {
    "key": "useMemo",
    "prefix": "useMemoSnippet",
    "body": [
      "useMemo(() => ${1:first}, [${2:second}])"
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "useReducer": {
    "key": "useReducer",
    "prefix": "useReducerSnippet",
    "body": [
      "const [state, dispatch] = useReducer(${1:first}, ${2:second}, ${3:third})"
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "useRef": {
    "key": "useRef",
    "prefix": "useRefSnippet",
    "body": [
      "const ${1:first} = useRef(${2:second})"
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "useState": {
    "key": "useState",
    "prefix": "useStateSnippet",
    "body": [
      "const [${1:first}, set${1/(.*)/${1:/capitalize}/}] = useState(${2:second})"
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "importAs": {
    "key": "importAs",
    "prefix": "ima",
    "body": [
      "import { ${2:second} as ${3:third} } from '${1:first}'"
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "importBrowserRouter": {
    "key": "importBrowserRouter",
    "prefix": "imbr",
    "body": [
      "import { BrowserRouter as Router } from 'react-router-dom'"
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "importBrowserRouterWithRouteAndNavLink": {
    "key": "importBrowserRouterWithRouteAndNavLink",
    "prefix": "imrr",
    "body": [
      "import { BrowserRouter as Router, Route, NavLink } from 'react-router-dom'",
      ""
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "importDestructing": {
    "key": "importDestructing",
    "prefix": "imd",
    "body": [
      "import { ${2:second} } from '${1:first}'"
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "importEverything": {
    "key": "importEverything",
    "prefix": "ime",
    "body": [
      "import * as ${2:second} from '${1:first}'"
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "importNoModuleName": {
    "key": "importNoModuleName",
    "prefix": "imn",
    "body": [
      "import '${1:first}'"
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "importPropTypes": {
    "key": "importPropTypes",
    "prefix": "impt",
    "body": [
      "import PropTypes from 'prop-types'"
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "importReact": {
    "key": "importReact",
    "prefix": "imr",
    "body": [
      "import React from 'react'"
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "importReactDom": {
    "key": "importReactDom",
    "prefix": "imrd",
    "body": [
      "import ReactDOM from 'react-dom'"
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "importRouterLink": {
    "key": "importRouterLink",
    "prefix": "imbrl",
    "body": [
      "import { Link } from 'react-router-dom'"
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "importRouterNavLink": {
    "key": "importRouterNavLink",
    "prefix": "imbrnl",
    "body": [
      "import { NavLink } from 'react-router-dom'"
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "importRouterSetup": {
    "key": "importRouterSetup",
    "prefix": "imbrc",
    "body": [
      "import { Route, Switch, NavLink, Link } from 'react-router-dom'"
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "importRouterSwitch": {
    "key": "importRouterSwitch",
    "prefix": "imbrs",
    "body": [
      "import { Switch } from 'react-router-dom'"
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "import": {
    "key": "import",
    "prefix": "imp",
    "body": [
      "import ${2:second} from '${1:first}'"
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "reactNativeImport": {
    "key": "reactNativeImport",
    "prefix": "imrn",
    "body": [
      "import { ${1:first} } from 'react-native'"
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "reactNativeStyles": {
    "key": "reactNativeStyles",
    "prefix": "rnstyle",
    "body": [
      "const styles = StyleSheet.create({${1:first}})"
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "importReduxConnect": {
    "key": "importReduxConnect",
    "prefix": "redux",
    "body": [
      "import { connect } from 'react-redux'"
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "reduxAction": {
    "key": "reduxAction",
    "prefix": "rxaction",
    "body": [
      "export const ${1:first} = (payload) => ({",
      "  type: ${2:second},",
      "  payload",
      "})",
      ""
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "reduxConst": {
    "key": "reduxConst",
    "prefix": "rxconst",
    "body": [
      "export const ${1:first} = '${1:first}'"
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "reduxReducer": {
    "key": "reduxReducer",
    "prefix": "rxreducer",
    "body": [
      "const initialState = {}",
      "",
      "export default (state = initialState, { type, payload }) => {",
      "  switch (type) {",
      "",
      "  case ${1:first}:",
      "    return { ...state, ...payload }",
      "",
      "  default:",
      "    return state",
      "  }",
      "}",
      ""
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "reduxSelector": {
    "key": "reduxSelector",
    "prefix": "rxselect",
    "body": [
      "import { createSelector } from 'reselect'",
      "",
      "export const ${1:first} = state => state.${2:second}"
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "reduxSlice": {
    "key": "reduxSlice",
    "prefix": "rxslice",
    "body": [
      "import { createSlice } from '@reduxjs/toolkit'",
      "",
      "const initialState = {",
      "",
      "}",
      "",
      "const ${1:${TM_FILENAME_BASE}} = createSlice({",
      "  name: ${2:second},",
      "  initialState,",
      "  reducers: {}",
      "});",
      "",
      "export const {} = ${1:${TM_FILENAME_BASE}}.actions",
      "",
      "export default ${1:${TM_FILENAME_BASE}}.reducer"
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "mappingToProps": {
    "key": "mappingToProps",
    "prefix": "reduxmap",
    "body": [
      "const mapStateToProps = (state) => ({})",
      "",
      "const mapDispatchToProps = {}"
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "describeBlock": {
    "key": "describeBlock",
    "prefix": "desc",
    "body": [
      "describe('${1:first}', () => { ${2:second} })"
    ],
    "description": "Testing `describe` block",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "itAsyncBlock": {
    "key": "itAsyncBlock",
    "prefix": "tita",
    "body": [
      "it('should ${1:first}', async () => { ${2:second} })"
    ],
    "description": "Testing asynchronous `it` block",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "itBlock": {
    "key": "itBlock",
    "prefix": "tit",
    "body": [
      "it('should ${1:first}', () => { ${2:second} })"
    ],
    "description": "Testing `it` block",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "setupReactComponentTestWithRedux": {
    "key": "setupReactComponentTestWithRedux",
    "prefix": "srtest",
    "body": [
      "import React from 'react'",
      "import renderer from 'react-test-renderer'",
      "import { Provider } from 'react-redux'",
      "",
      "import store from '~/store'",
      "import { ${1:${TM_FILENAME_BASE}} } from '../${1:${TM_FILENAME_BASE}}'",
      "",
      "describe('<${1:${TM_FILENAME_BASE}} />', () => {",
      "  const defaultProps = {}",
      "  const wrapper = renderer.create(",
      "    <Provider store={store}>",
      "     <${1:${TM_FILENAME_BASE}} {...defaultProps} />",
      "    </Provider>,",
      "  )",
      "",
      "  test('render', () => {",
      "    expect(wrapper).toMatchSnapshot()",
      "  })",
      "})"
    ],
    "description": "Create test component",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "setupReactNativeTest": {
    "key": "setupReactNativeTest",
    "prefix": "sntest",
    "body": [
      "import 'react-native'",
      "import React from 'react'",
      "import renderer from 'react-test-renderer'",
      "",
      "import ${1:${TM_FILENAME_BASE}} from '../${1:${TM_FILENAME_BASE}}'",
      "",
      "describe('<${1:${TM_FILENAME_BASE}} />', () => {",
      "  const defaultProps = {}",
      "  const wrapper = renderer.create(<${1:${TM_FILENAME_BASE}} {...defaultProps} />)",
      "",
      "  test('render', () => {",
      "    expect(wrapper).toMatchSnapshot()",
      "  })",
      "})"
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "setupReactNativeTestWithRedux": {
    "key": "setupReactNativeTestWithRedux",
    "prefix": "snrtest",
    "body": [
      "import 'react-native'",
      "import React from 'react'",
      "import renderer from 'react-test-renderer'",
      "import { Provider } from 'react-redux'",
      "",
      "import store from '~/store'",
      "import ${1:${TM_FILENAME_BASE}} from '../${1:${TM_FILENAME_BASE}}'",
      "",
      "describe('<${1:${TM_FILENAME_BASE}} />', () => {",
      "  const defaultProps = {}",
      "  const wrapper = renderer.create(",
      "    <Provider store={store}>",
      "      <${1:${TM_FILENAME_BASE}} {...defaultProps} />",
      "    </Provider>,",
      "  )",
      "",
      "  test('render', () => {",
      "    expect(wrapper).toMatchSnapshot()",
      "  })",
      "})"
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "setupReactTest": {
    "key": "setupReactTest",
    "prefix": "stest",
    "body": [
      "import React from 'react'",
      "import renderer from 'react-test-renderer'",
      "",
      "import { ${1:${TM_FILENAME_BASE}} } from '../${1:${TM_FILENAME_BASE}}'",
      "",
      "describe('<${1:${TM_FILENAME_BASE}} />', () => {",
      "  const defaultProps = {}",
      "  const wrapper = renderer.create(<${1:${TM_FILENAME_BASE}} {...defaultProps} />)",
      "",
      "  test('render', () => {",
      "    expect(wrapper).toMatchSnapshot()",
      "  })",
      "})"
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "testAsyncBlock": {
    "key": "testAsyncBlock",
    "prefix": "testa",
    "body": [
      "test('should ${1:first}', async () => { ${2:second} })"
    ],
    "description": "Testing `asynchronous test` block",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "testBlock": {
    "key": "testBlock",
    "prefix": "test",
    "body": [
      "test('should ${1:first}', () => { ${2:second} })"
    ],
    "description": "Testing `test` block",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "method": {
    "key": "method",
    "prefix": "met",
    "body": [
      "${1:first} = (${2:second}) => {${3:third}}"
    ],
    "description": "Creates a method inside a class",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "anonymousFunction": {
    "key": "anonymousFunction",
    "prefix": "anfn",
    "body": [
      "(${1:first}) => { ${2:second} }"
    ],
    "description": "Creates an anonymous function",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "namedFunction": {
    "key": "namedFunction",
    "prefix": "nfn",
    "body": [
      "const ${1:first} = (${2:second}) => { ${3:third} }"
    ],
    "description": "Creates a named function",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "destructingObject": {
    "key": "destructingObject",
    "prefix": "dob",
    "body": [
      "const {${2:second}} = ${1:first}"
    ],
    "description": "Creates and assigns a local variable using object destructing",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "destructingArray": {
    "key": "destructingArray",
    "prefix": "dar",
    "body": [
      "const [${2:second}] = ${1:first}"
    ],
    "description": "Creates and assigns a local variable using array destructing",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "setInterval": {
    "key": "setInterval",
    "prefix": "sti",
    "body": [
      "setInterval(() => { ${1:first} }, ${2:second})"
    ],
    "description": "Executes the given function at specified intervals",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "setTimeOut": {
    "key": "setTimeOut",
    "prefix": "sto",
    "body": [
      "setTimeout(() => { ${1:first} }, ${2:second})"
    ],
    "description": "Executes the given function after the specified delay",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "promise": {
    "key": "promise",
    "prefix": "prom",
    "body": [
      "return new Promise((resolve, reject) => { ${1:first} })"
    ],
    "description": "Creates and returns a new Promise in the standard ES7 syntax",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
}
